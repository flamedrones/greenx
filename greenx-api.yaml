openapi: 3.0.0
info:
  version: 0.0.1
  title: GreenX
servers:
  - url: 'http://localhost:3000'
paths:
  /user:
    get:
      summary: 'Sample endpoint: Returns details about a particular user'
      operationId: listUser
      tags:
        - user
      parameters:
        - name: id
          in: query
          description: ID of the user
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: 'Sample response: Details about a user by ID'
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /drone/order:
    post:
      summary: Create a Drone Order
      operationId: post-droneorder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        description: 'Specify Drone Package Position and Dimensions, and the delivery point'
      description: It Creates a Drone Order
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
    parameters: []
  /drone/reward:
    post:
      summary: Get Reward
      operationId: post-drone-reward
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                    format: email
                  tokenAmount:
                    type: number
                  orderId:
                    type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                orderId:
                  type: string
      description: Send Email to Backend to Make
components:
  schemas:
    User:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        tag:
          type: string
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    Order:
      title: Drone Order
      type: object
      description: The Firestore Order Object for a Drone Order
      properties:
        id:
          type: string
          readOnly: true
        status:
          type: string
          enum:
            - pending
            - in_delivery
            - complete
            - failed
          readOnly: true
        delivery_time:
          type: string
          format: date-time
          readOnly: true
        dimension:
          type: object
          properties:
            height:
              type: number
              format: float
              description: in cm
              minimum: 1
              maximum: 30
            width:
              type: number
              format: float
              description: in cm
              minimum: 1
              maximum: 30
            weight:
              type: number
              format: float
              minimum: 0.001
              maximum: 0.5
              description: in kg
            length:
              type: number
              format: float
              minimum: 1
              maximum: 30
              description: in cm
        pos:
          type: string
          description: |-
            current position of drone in lattitude and logitude;  

            if creating order, the order pickup location;

            see geopoint of firestore
        pickup_time:
          type: string
          format: date-time
          readOnly: true
        delivery_pos:
          type: string
          description: where the drone should arrive; firestore geopoint
